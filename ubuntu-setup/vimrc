set nocompatible              " be iMproved
filetype off                  " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Source support_function.vim to support vim-snippets.
if filereadable(expand("~/.vim/bundle/vim-snippets/snippets/support_functions.vim"))
    source ~/.vim/bundle/vim-snippets/snippets/support_functions.vim
endif

" let Vundle manage Vundle
Bundle 'gmarik/vundle'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-git'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'L9'
Bundle 'FuzzyFinder'
Bundle 'surround.vim'
Bundle 'mkitt/browser-refresh.vim'
Bundle 'cucumber.zip'
Bundle 'Markdown'
Bundle 'repeat.vim'
" Bundle 'SuperTab'
Bundle 'Align'
" Bundle 'git://git.wincent.com/command-t.git'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'scrooloose/syntastic'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter.git'
" Bundle 'https://github.com/flazz/vim-colorschemes.git'
" Bundle 'flazz/vim-colorschemes'
Bundle 'altercation/vim-colors-solarized'
Bundle 'ColorSchemeMenuMaker'
Bundle 'desert-warm-256'
Bundle 'junegunn/seoul256.vim'
Bundle 'taglist.vim'
Bundle 'jlanzarotta/bufexplorer'
" Bundle 'https://Alexandru_Vaduva-admin@bitbucket.org/Alexandru_Vaduva-admin/vim-config.git'
Bundle 'Chiel92/vim-autoformat'
Bundle '907th/vim-auto-save'
Bundle 'https://github.com/myusuf3/numbers.vim.git'
Bundle 'https://github.com/kien/ctrlp.vim.git'
" Bundle 'https://github.com/Shougo/neocomplcache.vim.git'
Bundle 'https://github.com/Shougo/neocomplete.vim.git'
Bundle 'https://github.com/ciaranm/detectindent.git'
Bundle 'https://github.com/troydm/easybuffer.vim.git'
Bundle 'https://github.com/Lokaltog/vim-powerline.git'
Bundle 'bitc/vim-bad-whitespace'
" Bundle 'ciaranm/detectindent'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'https://github.com/tomtom/tlib_vim.git'
Bundle 'groenewege/vim-less'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'bling/vim-bufferline'

Bundle 'tpope/vim-cucumber'
Bundle 'tpope/vim-haml'
Bundle 'pangloss/vim-javascript'
Bundle 'kchmck/vim-coffee-script'
Bundle 'tpope/vim-rails'
Bundle 'tpope/vim-rake'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-endwise'
" Bundle 'msanders/snipmate.vim'
Bundle 'ervandew/supertab'
Bundle 'mileszs/ack.vim'
Bundle 'Raimondi/delimitMate'
Bundle 'mattn/emmet-vim'
" Bundle 'mattn/zencoding-vim'
Bundle 'vim-scripts/IndexedSearch'
Bundle 'vim-scripts/matchit.zip'
Bundle 'godlygeek/tabular'
Bundle 'git://gist.github.com/287147.git'
Bundle 'https://github.com/vim-scripts/256-grayvim.git'
if executable('ctags')
"    Bundle 'majutsushi/tagbar'
    Bundle 'https://github.com/majutsushi/tagbar.git'
endif

Bundle 'SirVer/ultisnips'
Bundle 'garbas/vim-snipmate'
Bundle 'honza/vim-snippets'
Bundle 'https://github.com/tpope/vim-repeat.git'
Bundle 'https://github.com/wesleyche/SrcExpl.git'
Bundle 'git://github.com/nathanaelkane/vim-indent-guides.git'
Bundle 'chrisbra/SudoEdit.vim'
Bundle 'itchyny/lightline.vim'
"Bundle 'Townk/vim-autoclose'
Bundle 'mhinz/vim-startify'
"Bundle 'Valloric/YouCompleteMe'

"" Custom bundles
Bundle 'tpope/vim-commentary'
Bundle 'bling/vim-airline'
Bundle 'airblade/vim-gitgutter'
Bundle 'sheerun/vim-polyglot'
Bundle 'vim-scripts/grep.vim'
Bundle 'vim-scripts/CSApprox'
Bundle 'bronson/vim-trailing-whitespace'
Bundle 'Shougo/vimproc.vim', {
    \ 'build' : {
    \     'windows' : 'tools\\update-dll-mingw',
    \     'cygwin' : 'make -f make_cygwin.mak',
    \     'mac' : 'make -f make_mac.mak',
    \     'unix' : 'make -f make_unix.mak',
    \    },
    \ }
Bundle 'xolox/vim-misc'                                                                                                                        
Bundle 'xolox/vim-session'
Bundle 'sherzberg/vim-bootstrap-updater'

if v:version >= 703
    Bundle 'Shougo/vimshell.vim'
endif

if v:version >= 704
  Bundle 'FelikZ/ctrlp-py-matcher'
endif

"" Python Bundle
Bundle "davidhalter/jedi-vim"
Bundle "Yggdroot/indentLine"

Bundle 'vim-scripts/c.vim'

Bundle 'vim-perl/vim-perl'
Bundle 'c9s/perlomni.vim'

Bundle 'vim-bitbake'

" autoformat text
"let g:formatprg_args_c = "--mode=cs --style=ansi -pcHs4"

set linebreak
set showbreak=>>
set timeoutlen=200
set showmode
set laststatus=2
set shiftwidth=4
set tabstop=4
set guioptions=
set number
set showcmd
set hlsearch
set incsearch
set ignorecase
set smartcase
set autowriteall
set directory=~/temp
set numberwidth=4
set autoindent
set autoread
set ruler
set nofoldenable
set expandtab
set history=9000
set wrap
set viminfo='100,\"100,:2000,%,n~/.viminfo
set t_Co=256 " number of terminal colors available
set showmatch
set matchtime=1
set scrolloff=2
set t_RV=
set vb t_vb=
set visualbell t_vb=
set novisualbell
set noerrorbells
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=
set tm=100
set formatoptions+=l
set magic

syntax on
filetype indent on
filetype plugin on
au FileType php setl ofu=phpcomplete#CompletePHP
au FileType ruby,eruby setl ofu=rubycomplete#Complete
au FileType html,xhtml setl ofu=htmlcomplete#CompleteTags
au FileType c setl ofu=ccomplete#CompleteCpp
au FileType css setl ofu=csscomplete#CompleteCSS

colorscheme darkblue
" colorscheme ir_black
" colorscheme 256-grayvim

" if has("gui_running")
"     set guioptions-=T
" endif

set ffs=unix,dos,mac
set smarttab

"set spell       " Enable spell-checking
set cindent     " Use 'C' style program indenting
set autochdir   " Change working directory to open buffer
set bomb
set shell=/bin/sh

" Have Vim jump to the last position when reopening a file
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END

if has("folding")
  function! UnfoldCur()
    if !&foldenable
      return
    endif
    let cl = line(".")
    if cl <= 1
      return
    endif
    let cf  = foldlevel(cl)
    let uf  = foldlevel(cl - 1)
    let min = (cf > uf ? uf : cf)
    if min
      execute "normal!" min . "zo"
      return 1
    endif
  endfunction
endif

augroup resCur
  autocmd!
  if has("folding")
    autocmd BufWinEnter * if ResCur() | call UnfoldCur() | endif
  else
    autocmd BufWinEnter * call ResCur()
  endif
augroup END
"""
"if has("auto:cmd")
"  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
"    \| exe "normal! g'\"" | endif
"endif

" Close nerd tree if it is the last buffer
autocmd vimenter * if !argc() | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

set directory=~/.vim/tmp

map <C-l> :tabn<CR>
map <C-k> :tabp<CR>

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
set encoding=utf8

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Remember info about open buffers on close
set viminfo^=%

map <F3> :NERDTreeToggle<CR>
"  git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle

if has("cscope")
    set cscopetag
    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add the database pointed to by environment variable
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    set cscopeverbose

    " Map ctrl-\
    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

    " Map ctrl-space
    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>
endif

" show whitespaces after last character on lines
match ErrorMsg '\s\+$'

" Removes trailing spaces
function! TrimWhiteSpace()
"    %s/\s\+$//e
    g/^\_$\n\_^$/d
endfunction

nnoremap <leader>ld :call TrimWhiteSpace()<CR>

" Strip trailing whitespace, return to cursors at save
function! <SID>StripTrailingWhitespace()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfunction
autocmd FileType c,cpp,conf,css,html,perl,python,sh autocmd
    \ BufWritePre <buffer> :call <SID>StripTrailingWhitespace()

set encoding=utf-8

" Use the same symbols as TextMate for tabstops and EOLs
" set listchars=tab:▸\ ,eol:¬,tab:→\ ,trail:·
set listchars=eol:¬,tab:→·,trail:·
set nolist

set cursorline                                    " highlight current line
set scrolloff=3                                   " lines above/below cursor
set more                                          " ---more--- like less
hi CursorLine term=none cterm=none ctermbg=0

set vb t_vb=                                    " disable beep and flashing
set wildignore=.bak,.pyc,.o,.ojb,.a,
               \.pdf,.jpg,.gif,.png,
               \.avi,.mkv,.so                   " ignore said files
set wildmenu                                    " better auto complete
set wildmode=longest,list                       " bash-like auto complete
set hidden                                      " buffer change, more undo
set iskeyword+=_,$,@,%,#                        " not word dividers
"set list                                        " displaying listchars
set mouse=a                                     " disable mouse
set noshowmode                                  " hide mode cmd line
set noexrc                                      " don't use other .*rc(s)
set nostartofline                               " keep cursor column pos
set shortmess+=I                                " disable startup message
set splitbelow                                  " splits go below w/focus
set splitright                                  " vsplits go right w/focus
set ttyfast                                     " for faster redraws etc.
"set ttymouse=xterm2                             " experimental
set foldcolumn=0                                " hide folding column
set foldmethod=indent                           " folds using indent
set foldnestmax=10                              " max 10 nested folds
set foldlevelstart=99                           " folds open by default
set gdefault                                    " default s//g (global)
set incsearch                                   " 'live'-search
set matchtime=2                                 " time to blink match {}
set matchpairs+=<:>                             " for ci< or ci>
set showmatch                                   " tmpjump to match-bracket
set clipboard+=unnamedplus                      " use the clipboards of vim and win
"set clipboard+=unnamed                          " use the clipboards of vim and win
set go+=a                                       " Visual selection automatically copied to the clipboard
"set spell spelllang=en_us                       " Spellcheck enabled for US English language

" Toggle text wrapping
set ai "Auto indent
set si "Smart indent
"set wrap "Wrap lines
nmap <silent> <leader>w :set invwrap<CR>:set wrap?<CR>

" Disable visualbell
set visualbell t_vb=

" Git gutter (Git diff)
let g:gitgutter_enabled=0
nnoremap <silent> <leader>d :GitGutterToggle<cr>

" Toggle folding
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

""" Toggle syntax highlighting
function! ToggleSyntaxHighlighthing()
    if exists("g:syntax_on")
        syntax off
    else
        syntax on
        call CustomHighlighting()
    endif
endfunction
nnoremap <leader>s :call ToggleSyntaxHighlighthing()<CR>

let g:overlength_enabled = 0
highlight OverLength ctermbg=238 guibg=#444444

function! ToggleOverLength()
    if g:overlength_enabled == 0
        match OverLength /\%79v.*/
        let g:overlength_enabled = 1
        echo 'OverLength highlighting turned on'
    else
        match
        let g:overlength_enabled = 0
        echo 'OverLength highlighting turned off'
    endif
endfunction

nnoremap <leader>h :call ToggleOverLength()<CR>

""" Toggle relativenumber using <leader>r
nnoremap <leader>r :call NumberToggle()<CR>

function! NumberToggle()
    if(&relativenumber == 1)
        set number
    else
        set relativenumber
    endif
endfunction

" TagBar
let g:tagbar_left = 0
let g:tagbar_width = 30
set tags=tags;/

augroup AutoSyntastic
    autocmd!
    autocmd BufWritePost *.c,*.cpp,*.perl,*py call s:syntastic()
augroup END
function! s:syntastic()
    SyntasticCheck
    call lightline#update()
endfunction

" Syntastic - This is largely up to your own usage, and override these
" changes if be needed. This is merely an exemplification.
let g:ctrlp_reuse_window = 'startify' " don't split in startify
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_compiler_options = ' -std=c++0x'
let g:syntastic_mode_map = {
    \ 'mode': 'passive',
    \ 'active_filetypes':
    \ ['c', 'cpp', 'perl', 'python'] }

" Automatically remove preview window after autocomplete (mainly for clang_complete)
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

"highlight YcmWarningLine guibg=#ff00ff
"highlight YcmWarningSign guibg=#ff00ff
"highlight YcmWarningSection guibg=#ff00ff
"highlight YcmErrorLine guibg=#ffff00
"highlight YcmErrorSign guibg=#ffff00
"highlight YcmErrorSection guibg=#ffff00

"highlight ExtraWhitespace ctermbg=darkgreen guibg=lightgreen
"match ExtraWhitespace /\s\+$/
"autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
"autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
"autocmd InsertLeave * match ExtraWhitespace /\s\+$/
"autocmd BufWinLeave * call clearmatches()>

" Show trailing whitepace and spaces before a tab:
"autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/

"set list!
"set listchars=tab:>-
let c_space_errors = 1
let c_no_trail_space_error = 1
let c_no_tab_space_error = 1
let python_highlight_all = 1
let g:session_autosave = 'no'
let g:session_autoload = 'no'
"let g:ycm_confirm_extra_conf = 0

"Set nobomb support to remove BOM errors
au BufWritePre * setlocal nobomb
set encoding=utf-8 nobomb    " BOM often causes trouble
setlocal nobomb
setglobal nobomb"

set noinsertmode         "disable insert mode"
